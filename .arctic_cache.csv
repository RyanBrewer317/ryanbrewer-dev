"wiki/security-types.txt","juRAdN3Qdc4cG8WyYb75znjkY3Jxz3TTtqBzigDdotk","id:security-types","title:Security Types","tags:dcc,flac,ifc,information,flow,control,type,theory,authorization,taint,tracking,dependency,analysis","blerb:"
"wiki/product-category.txt","u1V4tyl6hbje4xmqXrkib+pUzpB0g5zQupd0/uHHoYY","id:product-category","title:Product Category","tags:bifunctor,bifunctors,category,theory,monoid,monoidal,product,cat","blerb:"
"wiki/natural-transformation.txt","O2hrq3NWb5zNm2NHv2LtAXnOjyRUi+6qsnL3kG28tfA","id:natural-transformation","title:Natural Transformation","tags:natural,transformation,naturality,transformations,functor,cat,functors,theory,categories,category,2-category,2-cell,2-morphism","blerb:"
"wiki/natural-isomorphism.txt","JSD2OR6pgRK7APBbJSM2gWUmmopy25GLl8cTY2DIr6s","id:natural-isomorphism","title:Natural Isomorphism","tags:natural,transformation,transformations,functor,category,isomorphism","blerb:"
"wiki/monoidal-category.txt","RBoqCqdLdWf0Dt1n9A3LPrN4sTnImwpYV/1VajxOXkE","id:monoidal-category","title:Monoidal Category","tags:monoid,monoidal,category,categories,string,diagram,diagrams,bicategory,bicategories,2-category,2-categories,bifunctor","blerb:"
"wiki/monoid.txt","1VtTmBvDRjjgzMuwdXKowwDZZBQgctsL4fd7M0h426c","id:monoid","title:Monoid","tags:monoidal","blerb:"
"wiki/monad.txt","Sr6HCT0l+hk9Et5X+xs5VZR0W1oXQaxybFtLkKzFa3Q","id:monad","title:Monads and Comonads","tags:functor,comonad,category,theory,adjunction,adjoint","blerb:"
"wiki/linear-logic.txt","U0oYaxlZmVlkTiMKgyNju6UN9xM3PoubBEsoDlnZi1I","id:linear-logic","title:Linear Logic","tags:girard,resource,substructural,affine,relevant,resources,category,theory,monoid,monoidal,string,star,autonomous,star-autonomous,*-autonomous,categories,once","blerb:"
"wiki/large-and-small-categories.txt","utdTXcHsL4gKjelM3oU5+hMb/zbVue+Ch22BOf8bMI4","id:large-and-small-categories","title:Large and Small Categories","tags:large,small,category,categories,theory,size,level,universe","blerb:"
"wiki/homset.txt","FKoKyioWS4vDQYtF75uwBs5y/dpGXEmf4QjGthIxT5o","id:homset","title:Homsets and Hom-Objects","tags:hom,hom-object,object,set,hom-set,homcategory,hom-category,category,theory,arrow,exonential,enriched,enrichment,enrich,morphism,function,space","blerb:"
"wiki/genealogy-of-morals.txt","bx0YWuxVtdk8pGkP1M+XbN43ksjRejbPjKv/uEw6bSM","id:genealogy-of-morals","title:Genealogy of Morals","tags:nietzsche,morality,slave,master,aristocrat,good,evil,bad,philosophy","blerb:"
"wiki/functor.txt","Kgd/ju37f3MvqcYxXd6mBLwufb/BACSsxIRnN6fBl1U","id:functor","title:Functor","tags:category,cat,categories,bifunctor,functoriality,bifunctoriality,functors,bifunctors,homomorphism,homomorphisms,structure,preserving,theory","blerb:"
"wiki/functor-category.txt","+2McrztMPeL88vj2jG2p9WmIksVdNXhk9QnkX8cxh8E","id:functor-category","title:Functor Category","tags:functor,functors,category,categories,theory,natural,transformation,transformations,exponential,object,cat","blerb:"
"wiki/first-wiki.txt","YXvYadTvuv3JblcrhgGJDsIfI3Cts1qqUELhw0RPtrA","id:first-wiki","title:My First Wiki Page","tags:first wiki","blerb:"
"wiki/fame.txt","B1ski2K506tKVQcGOSKWq8GdG6bFIxhFRK9aUDyo4fY","id:fame","title:Fame","tags:plans,ryan,brewer","blerb:"
"wiki/exponential-object.txt","vaD7CBNkhC6becyDjPKCF0wEb9dDikNibz1s4bMSQHE","id:exponential-object","title:Exponential Object","tags:exponential,object,objects,category,categories,arrow,arrows,morphism,morphisms,function,functions,type,types","blerb:"
"wiki/category.txt","O70ocs+P4PE8e/A1RA5ssRv3xFonGb+WSRQ7J9ZTR5M","id:category","title:Category","tags:category,categories,theory,object,objects,arrow,arrows,morphism,morphisms","blerb:"
"wiki/cat.txt","thP/xn7LucoXQEI7AhbDSpvqvt/SxYmtP98HyMqR/sM","id:cat","title:Cat","tags:cat,category,categories,functor,functors,natural,transformation,transformations","blerb:"
"wiki/bifunctor.txt","vT7v8fEJbXa0mLMGBghN3mmHcIR8ZTqWfopOBsaNI90","id:bifunctor","title:Bifunctor","tags:category,theory,functor,functors,product,products,functoriality,bifunctoriality,bifunctors,monoid,monoidal","blerb:"
"wiki/aesthetics.txt","IshVqIgUHyhtCF5eC0AOKf+eoyEWJEgtotJlcr0Hjlk","id:aesthetics","title:Aesthetics","tags:philosophy,art,aesthetic,beauty,pattern,thrownness","blerb:"
"wiki/adjunction.txt","7ybHTa2X03sYdXzsDSWmCgssCpWHN6G/yiNI0P5dhcs","id:adjunction","title:Adjunction","tags:functor,monad,comonad,category,theory,categories,monads,comonads,functors,equality,equivalence,isomorphism,isomorphisms,unit,counit,natural","blerb:"
"wiki/2-category.txt","SrGMksK7dlBsRw8cM9oBhmvx4ugHj3o92o6Dmu9FxZM","id:2-category","title:2-Category","tags:category,theory,categories,monoidal,cat","blerb:"
"posts/typechecking-svm.txt","ucJE/lKyEB1AU0qnSkcWsCw+ioSIWeakrL1SDzz/mTY","id:typechecking-svm","title:Advanced Typechecking for Stack-Based Languages","date:2024-02-18","tags:sabervm,advanced,type,types,typechecking,checking,check,typecheck,stack,based,stack-based,language,languages","blerb:This post discusses the interesting typechecker of SaberVM, which uses a stack-based bytecode language with a powerful type system."
"posts/type-of-sprintf.txt","vAYS0A4XXJDaOqn+5wKQ6zq0ErbBOmC4WIjEbnhCEpE","id:type-of-sprintf","title:The Type of Sprintf","date:2024-05-14","tags:dependent,type,types,theory,dependently,large,elimination,eliminations,sprintf,agda,printf,format,string,refinement","blerb:Most static type systems wouldn't let you make something like sprintf, whose type is determined by a format string. Dependent types can save the day!"
"posts/simple-programming-languages.txt","qSjVH8P2NGpqnNUzN+qpTL+flOOCkRraTwl8ZHb1ZnM","id:simple-programming-languages","title:Simple Programming Languages","date:2024-03-20","tags:simple,programming,language,languages,simplicity,readability,gleam,go,c,ready-at-hand,ready,at,hand,first-order,first,order,reason,reasoning,iteration,cycle,single,way,static,type,system,obj,heidegger,aesthetic,aesthetics","blerb:Simple programming languages are wonderful to work in. But what is it about them that actually makes them simple? And why do we like that so much?"
"posts/sequent-calculus.txt","CPZmCWkXEHRsObME/nhjqHcZ35HjjpxCQrfE3BV84UI","id:sequent-calculus","title:Par Part 1: Sequent Calculus","date:2025-01-13","tags:logic,linear,sequent,calculi,par,symbol,type,theory,category,monoid,monoidal,exchange,weakening,contraction","blerb:Sequent Calculus is a way of doing logic that's very explicit and mechanical. It's used as an important system and notation for type theory and logic related to programming languages."
"posts/security-crashing-modal-logic.txt","FHAh4yxOpbvQYSDamsIhXzH9AfLc9ZkQNXn2k9v37o0","id:security-crashing-modal-logic","title:Security and Crashing with Modal Logic","date:2023-12-17","tags:security,crash,crashing,modal,logic,monad,monadic,comonad,comonadic,assert,assertion,noninterference,secret,public,possibility,necessity,possibly,necessarily,tech,technology,software,coding,dependency,execution","blerb:Modal logic is a beautiful field of logic that can be applied to computer science in a few ways, one of which we explore in this post. It can elucidate security concepts and how and why to crash software."
"posts/safe-mmm-with-coeffects.txt","Uc6eu5MesODs8Scn0zuJZguf1kjYfvoDMhkyowUoSfQ","id:safe-mmm-with-coeffects","title:Safe Manual Memory Management with Coeffects","date:2024-01-25","tags:safe,safety,manual,memory,management,coeffect,coeffects,sabervm,saber,tech,programming,language,languages,static,analysis","blerb:Using ideas from Crary et al.'s Calculus of Capabilities, I discuss the coeffectful memory management used in SaberVM."
"posts/logic-in-types.txt","jEKja/5I0xd9oQgLIJSDq24LdG9aA5ImG0aKpu4vABk","id:logic-in-types","title:An Introduction to Proofs with Dependent Types","date:2023-12-03","tags:dependent,type,types,logic,proof,proofs,assistants,intro,introduction","blerb:This post introduces the basic ideas behind dependent-type-based proof assistants, and expressing logic with types and values."
"posts/implicit-products-better-forall.txt","HWa1vVnMjgaa3cTlH0FBvi9U09bGbb1c4J1O9MIvYWU","id:implicit-products-better-forall","title:Implicit Products: A Better Type-Theoretic ""Forall""","date:2023-12-10","tags:implicit,product,products,type,types,dependent,dependently,theory,forall,for all,set,logic,universal,quantifier,quantifiers,lambda,intersection,runtime,erasure,proof,irrelevance,cedille,cdle","blerb:Implicit products are a fascinating approach to universal quantification in dependent type theory, as well as proof irrelevance/erasure in compiler implementation."
"posts/getting-started-category-theory.txt","gWMpo3d2uMgL75U0S/+JSS+kvLH7ewbKiGkZGQDS0OQ","id:getting-started-category-theory","title:Getting Started with Category Theory","date:2024-07-29","tags:intro,introduction,getting,started,category,theory,categories,object,objects,morphism,morphisms,functor,functors,natural,transformation,transformations,product,coproduct,products,coproducts,limit,colimit,limits,colimits,initial,terminal,diagram,diagrams,bifunctor,bifunctors,monoid,monoidal,preorder,universal,construction,cone,cocone,cones,cocones,co-cone,co-cones,beginner,friendly,reference,getting,started","blerb:Category theory is a beautiful and powerful field but it can feel impenetrable without the right entry point. This post hopes to serve as a sort of beginner's guide and reference."
"posts/first-post.txt","HWXHGSKY1d7+3sqr5ICS8qTHOgWBaV84Ha3rjWeyl3A","id:first-post","title:My First Blog Post","date:2023-11-16","tags:first post","blerb:A test post for the blog."
"posts/cricket.txt","nOgjU1fxF1JVQNZYY4gCrvGE4quS5ndDheHoRho+tlc","id:cricket","title:The Cricket Language","date:2024-09-12","tags:programming,language,tech,announce,announcement,cricket,untyped,gradual,gradually,gradually-typed,dynamically,dynamically-typed,dynamic,type,typed,types,object,objects,object-oriented,oriented,immutable","blerb:Cricket is a lazy gradually-typed functional language with objects. It's very tiny but very expressive; anyone can implement it themselves!"
"posts/beginners-guide-pl-academia.txt","UkLy58tsHYUB05fjD7piWJ9T0TyqcnA4wjiVAv5sMZk","id:beginners-guide-pl-academia","title:A Beginner's Guide to Programming Language Academia","date:2024-01-28","tags:beginner,guide,pl,programming,language,languages,academia,paper,papers,academic,list,experience","blerb:This post briefly maps out many different subfields of programming language theory, in an effort to make it more accessible to those outside academia."
"posts/announcing-sabervm.txt","UXRhJGHZ6aIppnRgf7zFjGuyYDnwDuYO8kXo10koCNE","id:announcing-sabervm","title:Announcing the Saber Virtual Machine","date:2024-01-18","tags:announce,announcing,announcement,svm,saber,vm,sabervm,virtual,abstract,machine,exception,exceptions,handling,crash,crashing,microreboot,reboot,region,regions,capability,capabilities,morrisett,language,tech,technology,bytecode,stack,vale,generational","blerb:This post announces SaberVM, an abstract machine for functional programs that guarantees safety, reliability, and portability."
"wiki/linear-logic.txt","QnH64dq42EF5gRAGU/O2rfs+utEdPG96ps+K+ma7bLo","id:linear-logic","title:Linear Logic","tags:girard,resource,substructural,affine,relevant,resources,category,theory,monoid,monoidal,string,star,autonomous,star-autonomous,*-autonomous,categories,once","blerb:"
"posts/sequent-calculus.txt","+qjbOscPl6I8XLhXwtJ0SbJ3TRj59HigotVShGpnYm4","id:sequent-calculus","title:Par Part 1: Sequent Calculus","date:2025-01-13","tags:logic,linear,sequent,calculi,par,symbol,type,theory,category,monoid,monoidal,exchange,weakening,contraction","blerb:Sequent Calculus is a way of doing logic that's very explicit and mechanical. It's used as an important system and notation for type theory and logic related to programming languages.""posts/sequent-calculus.txt","+qjbOscPl6I8XLhXwtJ0SbJ3TRj59HigotVShGpnYm4","id:sequent-calculus","title:Par Part 1: Sequent Calculus","date:2025-01-13","tags:logic,linear,sequent,calculi,par,symbol,type,theory,category,monoid,monoidal,exchange,weakening,contraction","blerb:Sequent Calculus is a way of doing logic that's very explicit and mechanical. It's used as an important system and notation for type theory and logic related to programming languages."
"posts/linear-logic.txt","n+o0+RdKKrJ+jyf7Ge+NFm2shuH3/imEJGoBDjS0E68","id:linear-logic","title:Par Part 2: Linear Logic","date:2025-02-11","tags:substructural,structural,weakening,contraction,weak,lollipop,monoidal,monoid,game,semantics","blerb:Linear logic is a beautiful logical system taking advantage of the mechanisms of the sequent calculus. In this post we explore the various meanings of linear logic, and dig deep into the reasoning behind its peculiar development."
"posts/par.txt","qN1dFCjdN3u9WHYua/F0oO0/g8WXK8JMY8soYebsrcY","id:par","title:Par Part 3: Par, Continued","date:2025-03-07","tags:par,multiplicative,disjunction,linear,logic,classical,computational,disjunctive,lem,excluded,middle,syllogism,continuation,negation,constructive","blerb:Par is notoriously difficult to understand, but mostly due to a lack of resources. This post hopes to build on the prior posts on sequent calculus and linear logic to show how par is not such an alien concept after all, and make the theory much more accessible. We'll naturally stumble into constructive/computational classical logic along the way!"
"posts/par.txt","lk19JO20hRb68te199SIjQqkvj12QJQjcsUW1QpxFyU","id:par","title:Par Part 3: Par, Continued","date:2025-03-07","tags:par,multiplicative,disjunction,linear,logic,classical,computational,disjunctive,lem,excluded,middle,syllogism,continuation,negation,constructive","blerb:Par is notoriously difficult to understand, but mostly due to a lack of resources. This post hopes to build on the prior posts on sequent calculus and linear logic to show how par is not such an alien concept after all, and make the theory much more accessible. We'll naturally stumble into constructive/computational classical logic along the way!"
"posts/par.txt","ozomTsRgH8Qsl2bgptZEfq/brprdaEs2dAS00ARR+QQ","id:par","title:Par Part 3: Par, Continued","date:2025-03-07","tags:par,multiplicative,disjunction,linear,logic,classical,computational,disjunctive,lem,excluded,middle,syllogism,continuation,negation,constructive","blerb:Par is notoriously difficult to understand, but mostly due to a lack of resources. This post hopes to build on the prior posts on sequent calculus and linear logic to show how par is not such an alien concept after all, and make the theory much more accessible. We'll naturally stumble into constructive/computational classical logic along the way!"
"posts/par.txt","wAb7yLAeHDTzDuERujNq9243kewxmbuATA8x16r7CE0","id:par","title:Par Part 3: Par, Continued","date:2025-03-07","tags:par,multiplicative,disjunction,linear,logic,classical,computational,disjunctive,lem,excluded,middle,syllogism,continuation,negation,constructive","blerb:Par is notoriously difficult to understand, but mostly due to a lack of resources. This post hopes to build on the prior posts on sequent calculus and linear logic to show how par is not such an alien concept after all, and make the theory much more accessible. We'll naturally stumble into constructive/computational classical logic along the way!"
